# 桌面实时证券市场行情显示挂件程序 - 开发规范

## 项目概述
这是一个基于Electron的桌面实时证券市场行情显示挂件程序，使用TypeScript、React和现代前端技术栈开发。

## 代码风格规范

### TypeScript规范
- 严格使用TypeScript，禁用any类型
- 所有函数必须有明确的返回类型注解
- 使用接口定义数据结构，使用类型别名定义联合类型
- 优先使用const断言和readonly修饰符
- 使用泛型提高代码复用性

### React组件规范
- 使用函数式组件和Hooks
- 组件名使用PascalCase命名
- Props接口以组件名+Props命名
- 使用React.memo优化性能
- 自定义Hook以use开头命名

### 文件命名规范
- 组件文件：PascalCase.tsx
- 工具函数：camelCase.ts
- 常量文件：UPPER_SNAKE_CASE.ts
- 类型定义：kebab-case.types.ts
- 样式文件：与组件同名.module.css

### 目录结构规范
```
src/
├── main/           # Electron主进程
├── renderer/       # 渲染进程
│   ├── components/ # 可复用组件
│   ├── pages/      # 页面组件
│   ├── hooks/      # 自定义Hooks
│   ├── utils/      # 工具函数
│   └── styles/     # 样式文件
├── shared/         # 共享代码
└── assets/         # 静态资源
```

## 开发规范

### 代码质量要求
- 所有代码必须通过ESLint检查
- 使用Prettier进行代码格式化
- 提交前必须运行单元测试
- 代码覆盖率不低于80%
- 使用JSDoc注释文档化公共API

### Git提交规范
使用Conventional Commits规范：
- feat: 新功能
- fix: 修复bug
- docs: 文档更新
- style: 代码格式调整
- refactor: 代码重构
- test: 测试相关
- chore: 构建过程或辅助工具的变动

### 分支管理规范
- main: 主分支，用于生产环境
- develop: 开发分支
- feature/*: 功能分支
- hotfix/*: 热修复分支
- release/*: 发布分支

## 技术栈规范

### 前端技术栈
- Electron: ^28.0.0
- React: ^18.2.0
- TypeScript: ^5.0.0
- Ant Design: ^5.0.0
- ECharts: ^5.4.0
- Redux Toolkit: ^1.9.0
- React Router: ^6.8.0

### 开发工具
- Vite: ^5.0.0
- ESLint: ^8.0.0
- Prettier: ^3.0.0
- Jest: ^29.0.0
- Cypress: ^13.0.0

### 数据源规范
- 支持多数据源：新浪财经、东方财富、Yahoo Finance
- 实现数据源接口统一化
- 支持数据源热切换
- 实现数据缓存机制

## 组件开发规范

### 组件设计原则
- 单一职责原则
- 可复用性优先
- 支持主题定制
- 响应式设计
- 无障碍访问支持

### 状态管理规范
- 使用Redux Toolkit管理全局状态
- 本地状态使用useState和useReducer
- 异步操作使用RTK Query
- 状态持久化使用redux-persist

### 样式规范
- 使用CSS Modules避免样式冲突
- 支持主题切换（明暗主题）
- 使用CSS变量定义主题色彩
- 响应式断点：xs(480px), sm(768px), md(992px), lg(1200px), xl(1600px)

## API设计规范

### RESTful API规范
- 使用标准HTTP方法
- 返回统一的响应格式
- 实现适当的错误处理
- 支持分页和过滤

### WebSocket规范
- 实现心跳机制
- 支持断线重连
- 消息格式标准化
- 错误处理机制

## 测试规范

### 单元测试
- 使用Jest + React Testing Library
- 测试覆盖率要求：组件100%，工具函数90%
- 模拟外部依赖
- 测试异步操作

### 集成测试
- 测试组件间交互
- 测试数据流
- 测试用户操作流程

### E2E测试
- 使用Cypress测试关键用户路径
- 测试跨平台兼容性
- 测试性能指标

## 性能优化规范

### 代码分割
- 使用React.lazy实现组件懒加载
- 路由级别的代码分割
- 第三方库按需引入

### 内存管理
- 及时清理事件监听器
- 避免内存泄漏
- 使用WeakMap/WeakSet

### 渲染优化
- 使用React.memo避免不必要的重渲染
- 使用useMemo和useCallback优化计算
- 虚拟滚动处理大量数据

## 安全规范

### 数据安全
- 敏感数据加密存储
- API密钥安全管理
- 输入数据验证和清理

### 网络安全
- 使用HTTPS协议
- 实现CORS策略
- 防止XSS和CSRF攻击

## 错误处理规范

### 错误分类
- 网络错误：重试机制
- 业务错误：用户友好提示
- 系统错误：日志记录和上报

### 错误边界
- 组件级错误边界
- 全局错误处理
- 错误上报机制

## 文档规范

### 代码注释
- 复杂逻辑必须有注释
- 公共API必须有JSDoc注释
- 注释使用中文

### 文档维护
- README.md保持最新
- API文档及时更新
- 变更日志记录

## 发布规范

### 版本管理
- 使用语义化版本号
- 主版本号：不兼容的API修改
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正

### 构建规范
- 生产环境代码压缩
- 资源文件优化
- 环境变量配置

### 部署规范
- 自动化构建和部署
- 多平台打包支持
- 安装包签名

## 监控和日志

### 性能监控
- 应用启动时间
- 内存使用情况
- 网络请求性能

### 错误监控
- 错误日志收集
- 用户行为分析
- 崩溃报告

## 国际化规范

### 多语言支持
- 使用react-i18next
- 支持中文、英文
- 日期和数字格式化

### 本地化
- 时区处理
- 货币格式化
- 文化差异适配

## 无障碍访问

### WCAG 2.1 AA标准
- 键盘导航支持
- 屏幕阅读器兼容
- 颜色对比度要求
- 焦点管理

## 代码审查规范

### 审查要点
- 代码质量和可读性
- 性能影响
- 安全性考虑
- 测试覆盖度

### 审查流程
- 至少一名资深开发者审查
- 自动化检查通过
- 测试用例完整
- 文档更新

## 持续集成/持续部署

### CI/CD流程
- 代码提交触发构建
- 自动化测试执行
- 代码质量检查
- 自动部署到测试环境

### 环境管理
- 开发环境
- 测试环境
- 预发布环境
- 生产环境

## 项目特定规范

### 金融数据规范
- 数据精度要求
- 时间戳处理
- 数据验证规则
- 异常数据处理

### 图表组件规范
- 统一的图表配置
- 响应式图表设计
- 交互事件处理
- 主题适配

### 挂件系统规范
- 挂件生命周期管理
- 拖拽和调整功能
- 配置持久化
- 多窗口协调

## 开发环境配置

### 编辑器配置
- VSCode推荐扩展
- 代码片段配置
- 调试配置
- 快捷键设置

### 开发工具配置
- Git hooks配置
- 代码格式化规则
- 提交信息模板
- 分支保护规则

## 团队协作规范

### 沟通规范
- 使用项目管理系统
- 定期代码评审
- 技术分享会议
- 文档协作更新

### 知识管理
- 技术文档维护
- 最佳实践总结
- 问题解决方案
- 学习资源分享

---

**注意**: 本规范文件会随着项目发展持续更新，所有团队成员都应该遵循这些规范，确保代码质量和项目可维护性。 